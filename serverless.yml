service: serverless-nodejs

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221
  region: ap-northeast-1
  apiGateway:
    apiKeys:
      - myFirstKey
  iam:
    role:
      statements:
        - Effect: 'Allow'
          Action:
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: 'arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/users'

plugins:
  - serverless-offline
  - serverless-dynamodb-local

useDotenv: true

package:
  excludeDevDependencies: false
  patterns:
    - '!node_modules/**'
    - '!.dynamodb/**'
    - '!migrations/**'
    - '!package.json'
    - '!yarn.lock'
    - '!.prettierrc.json'
    - '!.vscode/**'
    - '!.env.dev'

custom:
  dynamodb:
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
    seed:
      development:
        sources:
          - table: users
            sources: [./migrations/users.json]

functions:
  scan:
    handler: users/scan.handler
    events:
      - http:
          path: /users
          method: get
          cors: true
  put:
    handler: users/put.handler
    events:
      - http:
          path: /users
          method: post
          cors: true
  get:
    handler: users/get.handler
    events:
      - http:
          path: /users/{id}
          method: get
          request:
            parameters:
              paths:
                id: true
          cors: true
          private: true
  delete:
    handler: users/delete.handler
    events:
      - http:
          path: /users/{id}
          method: delete
          request:
            parameters:
              paths:
                id: true
          cors: true
          authorizer:
            name: authorizer
            arn: ${env: COGNITO_ARN}
  update:
    handler: users/update.handler
    events:
      - http:
          path: /users/{id}
          method: put
          request:
            parameters:
              paths:
                id: true
          cors: true

resources:
  Resources:
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: users
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
